Analysis of AAAA Record Resolution Failure in Pi-hole/Cloudflared Docker Setup via Colima on macOS
I. Introduction
This report details the diagnostic process and findings regarding the failure of a Pi-hole instance, running within a Docker container managed by Colima on macOS, to resolve DNS AAAA (IPv6) records when using Cloudflared (running as cloudflared proxy-dns) as its upstream resolver. The primary symptom is the inability of clients using this Pi-hole setup to obtain IPv6 addresses for requested domains, such as github.com, while A (IPv4) record resolution functions correctly.

The investigation follows a structured approach, examining each component in the resolution chain:

Direct AAAA resolution capability of the Cloudflared instance.
Direct AAAA resolution capability of the Pi-hole instance.
IPv6 networking configuration within the Colima virtual machine and the Docker environment it manages.
Analysis of Pi-hole's operational logs for specific errors related to AAAA queries or upstream communication failures.
The objective is to identify the precise point of failure within this stack and provide recommendations for remediation.

II. Verifying Cloudflared's Direct AAAA Resolution Capability
The first step in diagnosing the resolution failure is to isolate the Cloudflared service and confirm its ability to resolve AAAA records independently of Pi-hole. Cloudflared, when configured as a DNS-over-HTTPS (DoH) proxy, forwards DNS queries received locally (typically on 127.0.0.1 or ::1 at a specified port) to upstream DoH providers like Cloudflare's own 1.1.1.1 service.   

Test Procedure:
A direct query is sent to the Cloudflared service listening on the host machine, bypassing Pi-hole entirely. Assuming Cloudflared is listening on the standard localhost IPv4 address (127.0.0.1) and port 5053, the following command is used:

Bash

dig AAAA github.com @127.0.0.1 -p 5053 +short
Expected Outcome:
If Cloudflared is functioning correctly and the host machine has proper network connectivity (including IPv6, if Cloudflared utilizes it for upstream communication, although the query to Cloudflared here uses IPv4), this command should return one or more valid IPv6 addresses for github.com. A successful response confirms that Cloudflared itself, using its configured DoH upstream , can resolve AAAA records. Cloudflare's infrastructure inherently supports IPv6.   

Potential Failure Points:

Cloudflared Configuration: Incorrect command-line arguments or configuration file settings for Cloudflared (e.g., wrong upstream DoH URL, incorrect listening port/address).   
Cloudflared Service Status: The cloudflared process may not be running or may have crashed.
Host Network Issues: The macOS host might have underlying network connectivity problems preventing Cloudflared from reaching its DoH upstream servers. While Cloudflare provides robust IPv6 support , local network or ISP issues could interfere.   
Firewall Rules: Host-level firewall rules might be blocking outbound connections from Cloudflared or inbound connections to port 5053 on 127.0.0.1.
Assuming this test succeeds, it indicates the root cause of the AAAA resolution failure lies further down the chain, involving Pi-hole or the Docker/Colima networking layer.

III. Verifying Pi-hole's Direct AAAA Resolution Capability
The next step involves testing Pi-hole's ability to resolve AAAA records when queried directly. This isolates Pi-hole and its interaction with its configured upstream (Cloudflared).

Test Procedure:
A direct DNS query for an AAAA record is sent to the Pi-hole container's IP address. Assuming the Pi-hole container is accessible at 192.168.64.2 on the local network:

Bash

dig AAAA github.com @192.168.64.2 +short
Observed Outcome (Based on User Query):
This test is known to fail, returning no AAAA record. This confirms the failure occurs at or before Pi-hole successfully returns the AAAA response to the client.

Analysis of Pi-hole Failure:

A. Query Reception: Pi-hole must first receive the AAAA query from the client. Log analysis (Section V) can confirm if the query reaches Pi-hole's internal dnsmasq process.
B. Upstream Forwarding: Upon receiving the query, Pi-hole should forward it to its configured upstream DNS server.
Upstream Configuration: The critical setting is within Pi-hole's Admin Interface (Settings -> DNS). Is 127.0.0.1#5053 (or the appropriate host IP and port visible from the container, such as the Docker gateway or host.docker.internal) configured as the sole custom upstream DNS server?. A common pitfall is leaving default upstream servers (like Google, Quad9) checked alongside the custom Cloudflared entry. This can lead to inconsistent behavior, where some queries might bypass Cloudflared entirely. Pi-hole's logs often show which upstream was used for a forwarded query.   
AAAA Filtering/Blocking: Pi-hole primarily blocks domains based on lists. It does not typically filter based on DNS record type (like AAAA) unless highly specific, custom regex rules targeting AAAA responses are implemented, which is extremely unlikely for a common domain like github.com. Configuration flags exist to control AAAA query analysis and logging within Pi-hole FTL (AAAA_QUERY_ANALYSIS=no, RESOLVE_IPV6=no), but these primarily affect statistics and potentially internal handling, not necessarily the forwarding itself unless misconfigured or bugged.   
Conditional Forwarding: If Pi-hole's Conditional Forwarding feature (Settings -> DNS -> Advanced) is enabled, it should be configured only for local domain resolution. Misconfiguration could potentially intercept and mishandle queries for public domains.
Internal dnsmasq Issues: Pi-hole relies on dnsmasq for its core DNS functionality. While generally robust for standard query types, underlying dnsmasq configuration issues or potential bugs could theoretically interfere with AAAA query processing. Logs often reveal dnsmasq warnings or errors, though often related to DHCP or configuration syntax.   
C. Connecting to Cloudflared: The failure of the direct dig to Pi-hole, combined with the assumed success of the direct dig to Cloudflared (Section II), strongly suggests that Pi-hole is either unable to successfully communicate with the Cloudflared service for AAAA queries or is receiving no valid response. This points directly towards the intervening Docker/Colima network layer as the likely point of breakdown.
IV. Deep Dive: IPv6 in the Docker/Colima Environment on macOS
The inability of Pi-hole to retrieve AAAA records from a functioning Cloudflared instance strongly implicates the networking environment provided by Docker running under Colima on macOS, particularly concerning IPv6.

A. The Critical Factor: Colima's IPv6 Limitations:

Multiple sources confirm that Colima has significant, known limitations regarding IPv6 networking support. explicitly lists "Lack of IPv6 support" as a known issue, referencing a specific bug report (abiosoft/colima#583). A comparison between Colima and OrbStack highlights Colima's lack of IPv6 capability. Furthermore, a Colima maintainer acknowledged that this limitation stems from the underlying virtualization framework (Lima) and the networking options available within macOS virtualization.   
Impact: This fundamental limitation means that Docker networks created and managed via Colima likely lack proper IPv6 routing, addressing, and external connectivity. Consequently, the Pi-hole container may:
Not possess a functional IPv6 address itself.
Be unable to route IPv6 traffic correctly, even to the host's IPv6 loopback address (::1). Colima's network bridging or NAT mechanisms likely fail to map or route traffic between the container's network namespace and the host's IPv6 stack effectively.
B. Verifying Docker Network IPv6 Configuration (Despite Colima):

Although Colima imposes limitations, examining the Docker configuration can reveal if IPv6 support was attempted, as misconfiguration could potentially worsen the situation or lead to misleading behavior.
Docker Daemon Configuration: Check the Docker daemon configuration file (typically /etc/docker/daemon.json within the Colima VM, or managed via Docker Desktop settings if using that frontend) for "ipv6": true and potentially a "fixed-cidr-v6" definition. While standard Docker settings, their efficacy is severely hampered by Colima's underlying constraints.  and  provide examples of these settings.   
Docker Compose Configuration: Inspect the docker-compose.yml file used to launch Pi-hole. Look for enable_ipv6: true under the network definition assigned to the Pi-hole service. This explicitly requests IPv6 enablement for the specific Docker network.  and  show examples. Even modern Docker versions often require this explicit flag for user-defined networks.   
Docker Network Inspection: Use the command docker network inspect <network_name> (where <network_name> is the network Pi-hole is attached to) and examine the output. Look for "EnableIPv6": true and any IPv6-related configuration under "IPAM" -> "Config", such as assigned subnets or an "IPv6DefaultGateway".
C. Interaction with macOS Networking:

Colima utilizes a Linux virtual machine (VM), often based on the Lima project, to host the Docker daemon. Networking between containers, the VM, and the macOS host involves layers of translation (NAT) or bridging. Colima's chosen method appears insufficient for robust IPv6. This contrasts with newer versions of Docker Desktop for Mac, which have invested in improving their network stack (using technologies like virtiofs) and have made strides in IPv6 support, though historically they also faced challenges. Advanced Docker networking options like macvlan or NDP proxying, which offer more direct network integration , are complex and unlikely to function reliably or be supported within the Colima environment.   
D. Container IPv6 Necessity vs. Capability:

Given Colima's documented limitations , the Pi-hole container almost certainly lacks functional, routable IPv6 connectivity. Does this inherently prevent it from handling AAAA resolution? Not necessarily. Pi-hole should still be able to function correctly by using IPv4 for its communication with the upstream resolver (Cloudflared).   
The expected flow is:
Client sends AAAA query to Pi-hole (likely via IPv4).
Pi-hole receives the query via IPv4.
Pi-hole forwards the AAAA query type to Cloudflared using the configured upstream address (127.0.0.1:5053), communicating via IPv4 through the Docker network stack.   
Docker networking (even via Colima) typically handles container-to-host IPv4 communication for mapped ports or localhost access.
Cloudflared, running on the host with potentially functional IPv6, receives the AAAA query via IPv4.
Cloudflared resolves the query using its DoH upstream (using the host's network stack).
Cloudflared sends the AAAA answer back to Pi-hole via the established IPv4 connection.
Pi-hole receives the AAAA answer via IPv4.
Pi-hole relays the AAAA answer to the original client (likely via IPv4).
This operational model, where the DNS server itself doesn't require IPv6 connectivity to resolve and serve AAAA records, is supported by community discussions.   
Hypothesized Failure Mechanisms: Why does this seemingly valid IPv4-based communication path fail specifically for AAAA records in the Colima setup?
Colima Network Instability: Colima's network bridge/NAT might be unstable or flawed, failing intermittently or specifically under conditions related to AAAA queries/responses (e.g., packet size, timing).  mentions potential port forwarding delays in Colima, hinting at network stack issues.   
Pi-hole/dnsmasq Internal IPv6 Attempt: Despite the upstream being configured as an IPv4 address (127.0.0.1), Pi-hole or its underlying dnsmasq might internally attempt to initiate the upstream connection using IPv6. In Colima's broken IPv6 environment, this attempt would fail immediately, preventing resolution.
Client Query via Broken IPv6: If the Pi-hole container somehow acquired an IPv6 address (even a non-routable one) and the client query arrived via IPv6, Pi-hole might fail to process this incoming request or forward it correctly due to the incomplete/broken container IPv6 stack.
Subtle Configuration Interaction: A less likely possibility is a subtle Pi-hole configuration flag related to IPv6 handling  interacting negatively with the Colima environment.   
V. Pi-hole Log Analysis for AAAA/IPv6 Errors
Analyzing Pi-hole's logs is crucial for observing its behavior during failed AAAA resolution attempts.

A. Accessing Logs:
The primary command to view logs for the Pi-hole container is:
Bash

docker logs pihole
(Replace pihole with the actual container name or ID if different).
To monitor logs in real-time while performing tests, use the -f (follow) flag:
Bash

docker logs -f pihole
B. Interpreting Log Entries:
Pi-hole utilizes dnsmasq for DNS handling, and log entries typically reflect dnsmasq activity.
Normal AAAA Forwarding Sequence (Expected if working):
dnsmasq[<pid>]: query[AAAA] github.com from <client_ip>
dnsmasq[<pid>]: forwarded github.com to 127.0.0.1#5053
dnsmasq[<pid>]: reply github.com is <valid_ipv6_address>
(Log format based on examples in ).   
Observed Failure Pattern (Hypothesized): Based on the symptoms, the logs are expected to show the initial query line and possibly the forwarded line, but then lack a corresponding reply line for AAAA queries. Instead, there might be silence or an explicit error message.
Specific Error Messages to Monitor:
Timeout/No Reply: Absence of a reply line after a reasonable time following a forwarded line suggests a timeout or lack of response from the upstream (Cloudflared).
Connection Errors: Explicit errors indicating failure to connect to the upstream (127.0.0.1#5053), such as "connection refused" or network unreachable errors.
NODATA-IPv4 for AAAA: Some logs show dnsmasq replying with NODATA-IPv4 even for AAAA queries when only an AAAA record exists. While potentially indicating client-side handling issues in that specific case, seeing this consistently for github.com (which has both A and AAAA) might point to dnsmasq confusion or problems processing the upstream response within the constrained environment.   
Upstream Server Errors: If multiple upstreams were accidentally configured, errors might specify failures related to the Cloudflared entry.   
DHCPv6 Warnings: While likely unrelated if Pi-hole's DHCP server is disabled, warnings like no address range available for DHCPv6 request  indicate dnsmasq's awareness of (and potential issues with) the IPv6 environment it's running in.   
C. Correlating Logs with Tests:
It is essential to precisely match the timestamps in the Pi-hole logs with the execution time of the failing dig AAAA github.com @192.168.64.2 command.
Key questions: Does the log show the AAAA query being received from the test client? Is it shown as being forwarded to 127.0.0.1#5053? What happens immediately after the forwarded line – is there a reply, an error, or simply nothing?
D. Log Interpretation Context:
The Pi-hole/dnsmasq logs provide symptoms but may not explicitly state the root cause. An entry showing a query forwarded to 127.0.0.1#5053 followed by silence or a timeout doesn't inherently explain why the timeout occurred. However, when interpreted within the context of Colima's known IPv6 limitations , these symptoms strongly suggest the failure lies in the unreliable or broken network path provided by Colima between the container and the host service. The log shows the effect (failure to get a reply), while the environment provides the likely cause (broken networking). Ensure Pi-hole FTL configuration flags (AAAA_QUERY_ANALYSIS, RESOLVE_IPV6 in /etc/pihole/pihole-ftl.conf) are not set in a way that suppresses relevant log information or alters expected resolution behavior.   
VI. Synthesis: Identifying the Root Cause(s)
Integrating the findings from each diagnostic step leads to a probable root cause for the AAAA resolution failure.

A. Connecting the Findings:

The Cloudflared service, when tested directly on the host, is presumed capable of resolving AAAA records (Section II).
Pi-hole, when queried directly, fails to return AAAA records (Section III).
The Docker environment is managed by Colima, which has documented, severe limitations in its IPv6 network implementation  (Section IV).   
Pi-hole logs are expected to show AAAA queries being forwarded to Cloudflared, but subsequently failing to receive a reply or timing out (Section V).
B. Primary Hypothesis:

The most probable cause of the failure is Colima's inadequate or non-functional IPv6 networking support. This prevents reliable communication between the Pi-hole container and the host-based Cloudflared service, specifically manifesting during AAAA resolution attempts. This breakdown could occur due to:
An inability of the Pi-hole container to establish or correctly route any IPv6 connection, including to the host's loopback address (::1), if Pi-hole attempts to use it.
General instability or flaws in Colima's network bridging or NAT mechanisms that specifically affect the container-to-host communication path required for DNS lookups, potentially triggered by AAAA query/response characteristics.
Pi-hole/dnsmasq potentially attempting an IPv6 upstream connection due to internal logic, even if configured with an IPv4 address. Such an attempt would fail immediately within Colima's broken IPv6 environment.
C. Secondary Possibilities (Less Likely):

Pi-hole Configuration: A subtle misconfiguration within Pi-hole related to IPv6 handling, such as incorrect interface settings in /etc/pihole/setupVars.conf , custom rules in /etc/dnsmasq.d/, or problematic flags in /etc/pihole/pihole-ftl.conf.   
Docker Image Issue: A specific incompatibility between the version of the pihole/pihole Docker image being used and the Colima runtime environment.
Client-Side Issues: While the direct dig to Pi-hole failing makes this unlikely as the sole cause, client-side IPv6 configuration or resolution behavior could potentially exacerbate issues in some scenarios.   
D. Ruling out Non-Issues:

Cloudflared's fundamental ability to resolve AAAA records (assuming the direct test in Section II passed).
Pi-hole's domain blocking functionality (unrelated to the mechanics of resolving specific record types).
VII. Detailed Recommendations & Solutions
Based on the analysis, the following recommendations are provided to resolve the AAAA record resolution issue.

A. Addressing the Core Issue (Colima Limitations):
Option 1: Switch Docker Runtime Environment (Strongly Recommended):
Given Colima's well-documented IPv6 shortcomings , the most robust and reliable solution is to migrate the Docker environment to a different runtime on macOS that offers better native IPv6 support.   
Comparison of Docker Runtimes on macOS for IPv6:
Feature	Docker Desktop (Recent Versions)	Colima	OrbStack
Native IPv6 Networking	Yes (Improved) 	No / Limited 	Yes 
enable_ipv6: true Support	Yes 	Attemptable, but ineffective	Yes
IPv6 Port Forwarding	Yes	Unreliable / Non-functional	Yes
Ease of IPv6 Config	GUI Toggle + Compose 	N/A (due to limitations)	GUI Toggle + Compose 
Known IPv6 Issues	Historically problematic , now improved	Fundamentally Lacking 	Generally Positive
  
    *   **Recommendation:** Transition to either **OrbStack** [9, 15] or the latest stable version of **Docker Desktop**.[15] Both provide user interfaces for enabling IPv6 and generally offer more mature and functional network stacks compared to Colima. This approach directly addresses the likely root cause identified in the synthesis.
*   **Option 2: Workaround within Colima (Attempt with Caution):**
    *   **Use Host Networking:** Modify the Pi-hole service definition in the `docker-compose.yml` file to use `network_mode: host`.
        *   *Mechanism:* This setting bypasses Docker's isolated container networking (and thus Colima's problematic implementation) and attaches the container directly to the host's network stack. Pi-hole would then attempt to bind ports directly on the host and access `127.0.0.1:5053` natively.[14, 21]
        *   *Critical Caveats:*
            *   **Port Conflicts:** Pi-hole requires ports 53 (TCP/UDP), 80 (TCP), and potentially 443 (TCP). If any other service on the macOS host (including system services like `mDNSResponder` which sometimes uses port 53) is already using these ports, the Pi-hole container will fail to start. Port 53 is frequently occupied.
            *   **Reduced Security:** This eliminates the network isolation benefit provided by Docker containerization.
            *   *References:* [23] notes potential issues when using `network_mode: host`. [21] and [14] discuss the trade-off between connectivity and isolation. [13] provides compose examples using this mode.
    *   **Explicit Host IP for Upstream:** If not using host networking, ensure Pi-hole's upstream DNS setting uses an IP address for Cloudflared that is explicitly reachable from within the container's network namespace. Instead of `127.0.0.1`, try the Docker network's gateway IP or the special DNS name `host.docker.internal` (if supported and resolved correctly in the Colima environment). This might force more reliable IPv4 communication if `127.0.0.1` resolution is ambiguous or failing within Colima.
B. Verifying Pi-hole Configuration:

In the Pi-hole Admin Interface (Settings -> DNS), confirm that only the custom upstream entry pointing to Cloudflared (e.g., 127.0.0.1#5053 or host.docker.internal#5053) is checked. Uncheck all other default upstream servers (Google, Quad9, etc.).   
Ensure Pi-hole's own DHCP server features (especially DHCPv6) are disabled if not intentionally used, as they can interact with IPv6 settings.   
Inspect configuration files within the Pi-hole volume mounts (/etc/pihole/setupVars.conf, files in /etc/dnsmasq.d/) for any non-standard or potentially conflicting IPv6 directives. Review flags in /etc/pihole/pihole-ftl.conf related to IPv6 analysis or resolution.   
C. Verifying Cloudflared Configuration:

Double-check the Cloudflared service configuration or command-line arguments to ensure it is correctly bound to listen on 127.0.0.1 (or 0.0.0.0 / :: if broader access is intended and secured) and the expected port (5053).   
D. Enabling Docker IPv6 (If Switching Runtime):

If migrating to Docker Desktop or OrbStack, explicitly enable IPv6 support within the application's settings (usually under Resources -> Network or similar).   
In the docker-compose.yml, ensure the network definition used by Pi-hole includes enable_ipv6: true.   
Optionally, configure the Docker daemon (daemon.json) to use a specific IPv6 Unique Local Address (ULA) range for container networks (e.g., "fixed-cidr-v6": "fd00::/80") to avoid reliance on potentially unstable global addresses. Note that some guides also mention needing ip6tables rules for proper routing , although newer Docker versions might handle this more automatically. Disabling the userland proxy ("userland-proxy": false in daemon.json) can sometimes improve IPv6 performance and source IP preservation but requires ip6tables support and is often considered experimental.   
E. Final Verification Steps:

After implementing any changes, ensure all relevant services are restarted (Colima/Docker runtime, Pi-hole container, Cloudflared service).
Systematically repeat the dig commands from the initial query:
dig AAAA github.com @127.0.0.1 -p 5053 +short (Direct to Cloudflared)
dig AAAA github.com @<pihole_ip> +short (Direct to Pi-hole)
Perform AAAA lookups from a client device configured to use the Pi-hole instance as its DNS server.
Monitor the Pi-hole logs (docker logs -f pihole) concurrently during testing to observe query forwarding and replies (or lack thereof).
VIII. Conclusion
The investigation strongly indicates that the failure to resolve AAAA (IPv6) DNS records in the described Pi-hole/Cloudflared setup stems from the inherent limitations of Colima's IPv6 networking capabilities on macOS. While Cloudflared running on the host and Pi-hole running in the container are likely capable of handling AAAA records individually, the network layer provided by Colima appears unable to reliably facilitate the necessary communication between them for these specific query types. Log analysis is expected to confirm a failure in receiving replies from the upstream resolver, symptomatic of this underlying network path issue.

The most effective and recommended path forward is to migrate the container environment from Colima to a more robust Docker runtime on macOS, such as Docker Desktop or OrbStack, both of which offer significantly better and more actively maintained IPv6 support. After migration, ensure IPv6 is enabled in the chosen runtime and within the Docker network configuration used by Pi-hole. As a less reliable alternative, attempting to use network_mode: host for the Pi-hole container within Colima might bypass the problematic Docker networking layer, but this approach carries significant risks related to port conflicts and reduced security isolation. Careful verification of Pi-hole and Cloudflared configurations remains essential regardless of the chosen solution. Addressing the container runtime's networking limitations is key to achieving reliable AAAA resolution in this stack.


Sources used in the report